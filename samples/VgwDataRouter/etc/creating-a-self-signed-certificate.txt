Monday, Jul/06/2020
==========================================================
It is necessary for the users to create a Root CA signed 
server side certificate file and point to that file at the time of
starting the IBM Streams application(s) that use the 
IBMVoiceGatewaySource operator. If the user doesn't point to 
this file at the time of starting the application, then the 
application will look for a default file named ws-server.pem 
inside the etc sub-directory of the application. This certificate 
will be presented to the IBM Voice Gateway for server validation 
when it establishes a WebSocket connection with the server-side 
application. For doing quick tests, you may save time and 
effort needed in getting a proper Root CA signed certificate 
by going with a simpler option of creating your own self-signed 
certificate. However, you must ensure that using a self-signed 
certificate is allowed in your environment before going that route. 
We have provided below a set of instructions to create a 
self-signed certificate.

Reference URL: 
These links have good information about the different certificate formats.
It will help to gain an understanding of this topic if not already familiar.

https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file
https://serverfault.com/questions/476576/how-to-combine-various-certificates-into-single-pem

NOTE
----
All the client side and server side TLS self-signed certificate files
created below can be copied to the client or server IBM Streams 
application's etc sub-directory and accessed from there within the 
client or server application code. If that is not desirable, you can 
store it outside of your IBM Streams application directory and use the 
full path to that file saccordingly in your application code. 

Estimated time required to perform all the steps below: 45 minutes.
==========================================================
1) Creating a server-side or client-side (private key + public certificate) PEM file for C++ and SPL 
   -------------------------------------------------------------------------------------------------
It is commonly done in Java to have trust store and key store for
keeping the remote machines' trusted public certificates and the
local machine's private key and its public certificate.
But, there is no such concept of trust store and key store in the 
C++ and SPL world. Instead, it is simply a certficate file in 
PEM format used in the C++ applications. PEM file is equivalent to
Java's trust store when it only has  a public certificate. It is 
equivalent to what is called a key store in the Java land when that 
PEM file has both the private key and the public certificate. 

[
Instructions below in this section (1) will work fine for the 
server-side where the IBMVoiceGatewaySource operator will be running.
In the same way, it will also work for the client-side applications
or operators if any in use.
]
 
a) On your Linux machine, create a directory: mkdir ~/ws-cert

b) Change to that directory:  cd ~/ws-cert

c) In that directory, create new file named ws-server-ssl.conf or 
   ws-client-ssl.conf depending on whether you are creating it for a server or a client,  
   add the following contents, save and close the file. You have to 
   change the C, ST, L, O and OU fields  shown below to suit your server or 
   client environment. For IP addresses, you should use the IP addresses of your IBM Streams 
   cluster machine's IP addresses. More specifically, the IP addresses of the 
   machines where you think the IBMVoiceGatewaySource operator or any of the
   client-side operators such as HttpPost might be placed.

[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no
[req_distinguished_name]
C = US
ST = NY
L = Yorktown Heights
O = IBM
OU = AI
CN = vgw.streams
emailAddress = vgw.streams@ibm.com
[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
IP.1 = 172.30.49.199
IP.2 = 172.30.49.189
IP.3 = 172.30.49.179
IP.4 = 172.30.49.169

d) Create this sub-directory now: mkdir ~/ws-cert/cert

e) Change to the newly created sub-directory:  cd ~/ws-cert/cert

f) By using the following command, create a new file named ws-server.pem or 
  ws-client.pem that will have either the server's or the client's private key 
  and a self-signed public certificate.

openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout ws-server.pem -out ws-server.pem -config ../ws-server-ssl.conf -extensions 'v3_req'

(OR)

openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout ws-client.pem -out ws-client.pem -config ../ws-client-ssl.conf -extensions 'v3_req'

g) Extract just the server's or the client's self-signed public certificate into a separate file.

openssl x509 -outform pem -in ws-server.pem -out ibm-streams-server-stt-crt.pem

(OR) 

openssl x509 -outform pem -in ws-client.pem -out ibm-streams-client-stt-crt.pem

h) We are done. You can verify the different parts of the certificate as shown below. 
   Ensure that the IP addresses you entered in your config file show up inside the certificate.

   openssl x509 -noout -text -in ibm-streams-server-stt-crt.pem
   openssl verify ibm-streams-server-stt-crt.pem  [You may ignore error 20 since there is no root CA in this self-signed certificate.]
   openssl x509 -in ibm-streams-server-stt-crt.pem -noout -issuer
   openssl x509 -noout -subject -in ibm-streams-server-stt-crt.pem

   (OR)
   
   openssl x509 -noout -text -in ibm-streams-client-stt-crt.pem
   openssl verify ibm-streams-client-stt-crt.pem  [You may ignore error 20 since there is no root CA in this self-signed certificate.]
   openssl x509 -in ibm-streams-client-stt-crt.pem -noout -issuer
   openssl x509 -noout -subject -in ibm-streams-client-stt-crt.pem
   
i) At this time, copy the ws-server.pem file or the ws-client.pem file to the 
   etc sub-directory of your IBM Streams application that uses the IBMVoiceGatewaySource 
   server operator or any other client operator. After copying this file there, 
   you must build your C++/SPL server or client application so that the new ws-server.pem 
   or the new ws-client.pem will get added into the SAB file. Alternatively, you can decide 
   to store the ws-server.pem or the new ws-client.pem file outside of your application directory.

j) Use the ibm-streams-server-stt-crt.pem file to configure the 
   IBM Voice Gateway's security (trust store) details by following the 
   instructions in that product's documentation. This step is needed only
   when there is interest in doing the server's identity check in the 
   client-side application(s).
   
   Similarly, use the ibm-streams-client-stt-crt.pem file to configure the 
   remote WebSocket server's security (trust store) details by following the 
   required steps mandated by the server application. This step is needed only
   when there is interest in doing the client's identity check in the 
   server-side application(s).

k) Since it is a self-signed certificate, your client or server application may 
   give this error at runtime. IBM Voice Gateway may also give this error at runtime: 
   
   CWSMR0070W: A request to the Watson Speech To Text service failed for the 
   following reason = unable to verify the first certificate.

   If you are running IBM Voice Gateway and IBM Streams in your private 
   trusted network, you may consider deploying IBM Voice Gateway with the 
   following environment variable set in the vgw-media-realy section of 
   your deployment JSON file. That will prevent the above mentioned error 
   from happening. 

{
     "name": "NODE_TLS_REJECT_UNAUTHORIZED",
     "value": "0"
}   
   
If you are not allowed or not comfortable with this configuration, 
then you must not use a self-signed certificate. Instead, you must 
create a certificate and get it signed by a well-known root CA so that 
your certificate will include the details about the full chain of the 
signers. That will make the IBM Voice Gateway product to validate the 
signers properly and not give the error mentioned above.

l) If you no longer need the directory structure that we created above, 
   you may delete it using these commands.
   
   cd
   rm -rf ~/ws-cert
==========================================================
2) Creating a client-side key store for Java
   ------------------------------------------
For Java based client applications, we have to create a keystore if
client authentication i.e. mutual authentication will be performed by 
the remote server. In Java, JKS is the most commonly used technique 
for creating key stores. For our testing purposes, we can create a 
self signed client certificate along with a key store as shown below.

Reference URL:
https://www.sslshopper.com/article-how-to-create-a-self-signed-certificate-using-java-keytool.html

keytool -genkey -keyalg RSA -alias stt -keystore key-store-on-client-side.jks -storepass stt1 -validity 7200 -keysize 2048

When prompted, you can make the key password same as that of the store password 
mentioned in the keytool command above. Please remember this password for later 
use in the Java client application(s). You can copy your key-store-on-client-side.jks
file either to the etc sub-directory of your IBM Streams Java client application or
outside of your application directory. If you choose to store it in the etc sub-directory, 
then you must compile your IBM Streams Java client application so that the 
JKS file gets included in the Streams executable SAB file.
==========================================================
3) Creating a client-side key store for C++ and SPL
   ------------------------------------------------
For C++ and SPL client applications, we can't use a JKS based key store. 
Instead, we will use a PEM file that will have both the client's private key and
its public certificate. In section (1) above, we already covered about how to
create a PEM file that can contain the C++ client's private key and its 
public certificate. In that section, focus on the client-side specific steps to
create a ws-client.pem file.

The PEM file (ws-client.pem) file created above can be used inside the
C++, SPL client application logic to provide the client's identity to the
remote server when mutual authentication is performed. You can copy your 
ws-client.pem file either to the etc sub-directory of your IBM Streams 
Java client application or outside of your application directory. If you choose
to store it in the etc sub-directory, then you must compile your IBM Streams C++/SPL
client application so that the pem file gets included in the Streams executable SAB file.
==========================================================
4) Creating a client-side trust store for Java
   -------------------------------------------
If you have Java based client applications connecting to the 
IBMVoiceGatewaySource operator, they will require
a trust store file to be created by importing the server-side
certificate into it. This step is needed if there is interest in doing 
server's identity check. You can learn more about creating a 
PKCS12 based trust store for Java applications from the following URL.

https://docs.oracle.com/cd/E19509-01/820-3503/ggfgo/index.html

I used the following two simple steps to create a client-side 
trust store to be used in the Java based HttpPost operator 
included in the streamsx.websocket toolkit.

1) Use steps g and j shown in section (1) above to prepare/extract a 
server-side public certificate PEM file.

2) Run the following command to create a client-side trust store and 
import the server-side public certificate into that store. You have to 
give a six characters wide trust store password.

[
Remember the password that you will enter while running this command. 
You will need it for later use in your Java client application(s).
]

keytool -import -file ibm-streams-server-stt-crt.pem -alias stt -keystore trust-store-on-client-side.jks

This trust store will be used in your Java client appliction to authenticate the 
remote server's identity. You can copy your trust-store-on-client-side.jks
file either to the etc sub-directory of your IBM Streams Java client application or
outside of your application directory. If you choose to store it in the etc sub-directory, 
then you must compile your IBM Streams Java client application so that the 
JKS file gets included in the Streams executable SAB file.
==========================================================
5) Creating a client-side trust file for C++ and SPL
   -------------------------------------------------
In C++ and SPL client applications, there is no concept called
trust store. Instead, it is called peer verification in the C++ lingo.
You can simply obtain the server-side certificate or
extract using step g above. Then, you point to that file in your
SPL and C++ based client-side operators or application code to
authenticate the remote server's identity. This step is needed 
if there is interest in doing server's identity check.

e-g: ibm-streams-server-stt-crt.pem

You can copy your pem file either to the etc sub-directory of your IBM Streams 
SPL client application or outside of your application directory. If you choose
to store it in the etc sub-directory, then you must compile your IBM Streams C++/SPL
client application so that the pem file gets included in the Streams executable SAB file.
==========================================================
6) Creating a server-side trust file for C++ and SPL
   -------------------------------------------------
We can generate trust files to mutually authenticate either 
a C++ or a Java based client.   
   
a) Trust file for authenticating C++ based clients
   ***********************************************
You can extract a C++ client's certificate from the ws-client.pem that you
created in (3) above. Following command will do that.

openssl x509 -outform pem -in ws-client.pem -out ibm-streams-client-stt-crt.pem

b) Trust file for authenticating Java based clients
   ************************************************
If you have a Java based client, then you can do an import from the 
JKS key store created above in section (2). Following commands will help in doing that.
Use the same key store password that you gave in (2) above when you are prompted for a 
password and a pass phrase when executing the following commands. This step is needed 
only if there is interest in doing the mutual authentication at the server-side to 
check the client's identity.

Reference URL:
https://stackoverflow.com/questions/652916/converting-a-java-keystore-into-pem-format

keytool -importkeystore -srckeystore key-store-on-client-side.jks -destkeystore foo.p12 -srcalias stt -srcstoretype jks -deststoretype pkcs12

openssl pkcs12 -in foo.p12 -out ws-client.pem

openssl x509 -outform pem -in ws-client.pem -out ibm-streams-client-stt-crt.pem

rm -f ws-client.pem
rm -f foo.p12

You can now use the client's public certificate file created above in the 
server side C++ or SPL code where it will serve the need for 
authenticating the client's identity i.e. if mutual authentication is
needed.

You can copy your pem file either to the etc sub-directory of your IBM Streams 
C++/SPL server application or outside of your application directory. If you choose
to store it in the etc sub-directory, then you must compile your IBM Streams C++/SPL
server application so that the pem file gets included in the Streams executable SAB file.
==========================================================
7) Fetching and displaying the public certificate of any TLS protected web server
   ------------------------------------------------------------------------------
Following openssl command will let us fetch and display the public certificate of a remote server.

echo | openssl s_client -showcerts -servername ibm.com -connect ibm.com:443 2>/dev/null | openssl x509 -inform pem -noout -text
==========================================================
