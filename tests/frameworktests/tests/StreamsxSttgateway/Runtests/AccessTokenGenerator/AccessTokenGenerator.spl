use com.ibm.streamsx.sttgateway.watson::IAMAccessTokenGenerator;
use com.ibm.streamsx.sttgateway.watson::IAMAccessToken;
use com.ibm.streamsx.testframe::FileSink1;

composite AccessTokenGenerator {
	//<!appConf*>param
		//<!appConf*>expression<rstring> $apiKey :      getSubmissionTimeValue("apiKey", "valid");
		//<!appConf*>expression<rstring> $iamTokenURL : getSubmissionTimeValue("iamTokenURL", "http://localhost:8097/access");
		//<!appConf*>expression<float64> $failureRetryDelay : (float64)getSubmissionTimeValue("failureRetryDelay", "10.0");
		//<!appConf*>expression<int64>   $guardTime : (int64)getSubmissionTimeValue("guardTime", "5");
		
	graph
		stream<IAMAccessToken> IAMAccessTokenStream = IAMAccessTokenGenerator() {
			//<!appConf*>param
				//<!appConf*>apiKey: $apiKey;
				//<!appConf*>iamTokenURL: $iamTokenURL;
				//<!appConf*>failureRetryDelay: $failureRetryDelay;
				//<!appConf*>guardTime : $guardTime;
				//<!appConf*>maxRetryDelay : 66.0;
				//<!appConf*>defaultExpiresIn : 3666l;
		}
		
		stream<IAMAccessToken, tuple<timestamp time>> IAMAccessTokenStream2 as O = Custom(IAMAccessTokenStream as I) {
			logic
				state : mutable int32 count = 0;
				onTuple I: {
					mutable O otuple = {};
					assignFrom(otuple, I);
					otuple.time = getTimestamp();
					submit(otuple, O);
					++count;
					if (count == 4)
						submit(Sys.WindowMarker, O);
					block(5.0);
				}
				
		}
		
		() as Sink = FileSink1(IAMAccessTokenStream2) { }

	config
		restartable: false;
}
