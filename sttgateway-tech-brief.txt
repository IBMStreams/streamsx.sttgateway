============================================================
First created on: July/01/2018
Last modified on: September/15/2018

Purpose of this toolkit
-----------------------
The streamsx.sttgateway toolkit provides an operator that helps you to 
integrate IBM Streams with the IBM Speech To Text (STT) cloud service.
(https://www.ibm.com/watson/services/speech-to-text/)
This toolkit lets you send audio data to the Watson STT service and 
get back the transcription results. This toolkit is designed to work 
with the IBM Watson STT service available on IBM public cloud and on 
IBM Cloud Private (ICP). It uses the Websocket communication API interface 
provided by that Watson STT service. It can take audio data either from the 
real-time speech conversations or from the prerecorded speech conversations 
that are stored in files. 

Technical positioning of this toolkit
-------------------------------------
At a very high level, this toolkit shares the same design goal as the other 
IBM Streams toolkit named com.ibm.streams.speech2text to convert speech data 
into text. But, they both work very differently to realize that design goal.
IBM Streams users can select either of these two toolkits depending on their 
application and hardware infrastructure needs. So, it is important to know 
the following major differences between these two toolkits before choosing 
the suitable one for a given situation.

1) Namespace for them are different.
   --> com.ibm.streams.speech2text.watson (Wraps Rapid libraries)
   --> com.ibm.streamsx.sttgateway.watson (Invokes the IBM Watson STT cloud service)
   
2) Self contained versus external service invocation.
   --> com.ibm.streams.speech2text is self contained. It includes
       the speech to text core libraries and a small number of base language 
       model files that are necessary to do the speech to text conversion.
       
   --> com.ibm.streamsx.sttgateway relies on an external
       STT service. It contains the necessary code to communicate with
       the external STT service to get the speech to text conversion done.
       
3) Speech data stays within your application versus going outside.
   --> In com.ibm.streams.speech2text, audio content
       will not have to go outside of this toolkit.
       
   --> In com.ibm.streamsx.sttgateway, Audio content will 
       go outside of this toolkit via the network to the 
       external service that can run either on the IBM public cloud 
       or inside your own private network in an ICP container.

4) Ease of customizing the LM and AM models.
   --> In com.ibm.streams.speech2text, model customization 
       (for both LM and AM) requires the user to do the customization either
       on the IBM public cloud or on-prem and then copy the generated
       custom model patch files into the Streams machine so that they are
       locally accessible by the Streams application.
       
   --> In com.ibm.streamsx.sttgateway, LM and AM model
       customization is done using the IBM cloud tools/infrastructure.
       Such customized LM and AM models can be used via the
       WatsonSTT operator parameters without a need to obtain the
       copies of the generated custom model patch files into the
       Streams application machine.
       
5) Ease of switching between different language models and minimizing toolkit upgrade cycles.
   --> In com.ibm.streams.speech2text, it is necessary to 
       package relevant language base models (English, Spanish, French etc.) as
       part of this toolkit. This also implies that a toolkit upgrade will be
       needed for using newer versions of the models as well as the
       newer versions of the speech engine libraries.
       
   --> In com.ibm.streamsx.sttgateway, there is no packaging of
       the language model files needed inside the toolkit.
       Switching between different language models is simply
       done through an operator parameter. There is no need to upgrade
       this toolkit for using the newer versions of the models as well as
       the newer versions of the speech engine libraries as they become
       available in the external Watson STT service.
       
6) Ease of using different audio formats.
   --> In com.ibm.streams.speech2text, it may be possible to
       use only WAV formatted audio data.
       
   --> In com.ibm.streamsx.sttgateway, any supported audio
       format by the STT service can be used (mp3, WAV, FLAC etc.)

7) Speech to text conversion performance.
   --> In the lab tests, both toolkits seem to provide the same
       level of performance in terms of the total time
       taken to complete the transcription of the given audio content.
       However, it is important to note that under certain
       batch workloads, the com.ibm.streamsx.sttgateway seems to complete
       the transcription faster than the com.ibm.streams.speech2text.
       
8) Operator names.
   --> In com.ibm.streams.speech2text, WatsonS2T is the
       operator name.
       
   --> In com.ibm.streamsx.sttgateway, WatsonSTT is the
       operator name.

9) RPM dependency.
   --> In com.ibm.streams.speech2text, atlas and atlas-devel 
       RPMs for Linux must be installed in all the 
       Streams machines where the WatsonS2T is running.
       
   --> In com.ibm.streamsx.sttgateway, there is no such 
       RPM dependency.
       
10) CPU core usage.
   --> In com.ibm.streams.speech2text, every instance of the
       WatsonS2T operator must run on its own PE (a.k.a Linux process).
       Multiple instances of that operator can't be fused to 
       pack them into a single Linux process. This will
       result in using many CPU cores when there is a need to
       have a bank of WatsonS2T operators to achieve data parallelism.
       
   --> In com.ibm.streamsx.sttgateway, there is no such
       restriction to fuse multiple WatsonSTT operators into a
       single PE (Linux process). This will result in the efficient
       use of the CPU cores by requiring fewer CPU cores to have
       a bank of WatsonSTT operators to achieve data parallelism.

11) Transcription result options.
   --> In com.ibm.streams.speech2text, the WatsonS2T operator can
       only return one full utterance at a time.
       
   --> In com.ibm.streamsx.sttgateway, the WatsonSTT operator
       can be configured at runtime to return one of the following as
       transcription result.       
       1) Partial utterances as the transcription is in progress.
       2) Only finalized a.k.a. completed utterances.
       3) (default) Full text containing all the finalized 
          utterances after transcribing the entire audio.
       
12) Value added features.
   --> In com.ibm.streams.speech2text, the WatsonS2T operator can
       only provide the core speech to text capabilities.

   --> In com.ibm.streamsx.sttgateway, the WatsonSTT operator
       can optionally provide a few value added features in addition to
       the core speech to text capabilities. Such features include
       smart formatting, profanity filtering, keywords spotting etc.

Major external dependency for this toolkit
------------------------------------------
Bulk of the Websocket logic in this toolkit's operator relies on the
following open source C++ Websocket header only library.
https://github.com/zaphoyd/websocketpp

Much of the Websocket logic here also follows the
sample code from this URL: https://gist.github.com/zaphoyd/6021634

A great source of learning for Websocket++ is here:
https://docs.websocketpp.org/index.html

This toolkit requires the following two open source packages that are
not shipped with this toolkit due to the open source code distribution
policies. Users of this toolkit must first understand the usage clauses
stipulated by these two packages and then bring these open source packages 
on their own inside of this toolkit as explained below. This needs to be
done only on the Linux machine(s) where the Streams application development
i.e. coding, compiling and packaging is done. Only after doing that,
users can use this toolkit in their Streams applications.

1) boost_1_67_0 or a higher version
   [IMPORTANT: Substitute your higher version number as needed in place of 1_67_0 below.]
   [Check the current official boost version from here: https://www.boost.org/]
   
   --> A few .so files from the boost_1_67_0/lib directory are
       copied into the impl/lib directory of this toolkit.
       (It is needed for the dynamic loading of these .so files
        when the Streams application using this toolkit is launched.)
       
   --> The entire boost_1_67_0/include directory is copied into
       the impl/include directory of this toolkit. [Around 200 MB in size]
       (It is needed for a successful compilation of the 
       Streams application that uses this toolkit. Please note that
       these include files will not bloat the size of that
       application's SAB file since the impl/include directory will not be
       part of the SAB file.)
       
2) websocketpp v0.8.1
   --> The entire websocketpp directory is copied into
       the impl/include directory of this toolkit. [Around 1.5 MB in size]
       (It is needed for a successful compilation of the 
       Streams application that uses this toolkit. Please note that
       these include files will not bloat the size of that
       application's SAB file  since the impl/include directory will not be
       part of the SAB file.)

Downloading and building boost_1_67_0 or a higher version
---------------------------------------------------------
[IMPORTANT: Substitute your higher version number as needed in place of 1_67_0 below.]
[Check the current official boost version from here: https://www.boost.org/]

a) Download and build boost 1_67_0 or a higher version in the user's home directory by using the --prefix option as shown below:

Download boost_1_67_0 in your home directory: 
mkdir <YOUR_HOME_DIRECTORY>/boost-install-files
cd <YOUR_HOME_DIRECTORY>/boost-install-files
wget https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.gz   [Approximately 1 minute]

Extract boost_1_67_0 in <YOUR_HOME_DIRECTORY>/boost-install-files:
cd <YOUR_HOME_DIRECTORY>/boost-install-files
tar -xvzf <YOUR_HOME_DIRECTORY>/boost-install-files/boost_1_67_0.tar.gz    [Approximately 5 minutes]

Bootstrap boost_1_67_0 and install it in your home directory using the --prefix option:
cd <YOUR_HOME_DIRECTORY>/boost-install-files/boost_1_67_0
./bootstrap.sh --prefix=<YOUR_HOME_DIRECTORY>/boost_1_67_0             [Approximately 1 minute]
./b2 install --prefix=<YOUR_HOME_DIRECTORY>/boost_1_67_0 --with=all    [Approximately 25 minutes]
cd <YOUR_HOME_DIRECTORY>
rm -rf <YOUR_HOME_DIRECTORY>/boost-install-files         [Approximately 2 minutes]

Instructions shown above are from this URL:
https://gist.github.com/1duo/2d1d851f76f8297be264b52c1f31a2ab

b) After that, copy a few .so files from the <YOUR_HOME_DIRECTORY>/boost_1_67_0/lib
   directory into the impl/lib directory of this toolkit.
   (libboost_chrono.so.1.67.0, libboost_random.so.1.67.0, 
    libboost_system.so.1.67.0, libboost_thread.so.1.67.0)
    
   For all those .so files you copied, you must also create a 
   symbolic link within the impl/lib directory of this toolkit.
   So, change directory to the impl/lib directory of this toolkit and 
   execute the Linux symbolic link command as shown below for every
   .so file you copied into that directory.
   
   e-g: ln -s libboost_chrono.so.1.67.0 libboost_chrono.so

c) Move the entire <YOUR_HOME_DIRECTORY>/boost_1_67_0/include/boost directory into the
   impl/include directory of this toolkit.
   
d) At this time, you may delete the <YOUR_HOME_DIRECTORY>/boost_1_67_0 directory.

Downloading websocketpp 0.8.1
-----------------------------
a) Download websocketpp v0.8.1 from https://github.com/zaphoyd/websocketpp/releases and 
   extract it in your home directory first. Then move the ~/websocket-0.8.1/websocketpp directory 
   into the impl/include directory of this toolkit.
   (websocket++ is a header only C++ library which has no .so files of its own.
    In that way, it is very convenient.)

b) At this time, you may delete the ~/websocket-0.8.1 directory.

A must do in the Streams applications that will use this toolkit
----------------------------------------------------------------
a) You must add this toolkit as a dependency in your application.
   --> In Streams Studio, you can add this toolkit location in the
       Streams Explorer view and then add this toolkit as a
       dependency inside your application project's Dependencies section.
       
   --> In a command line compile mode, simply add the -t option to
       point to this toolkit's top-level or its parent directory.
       
b) --> In Streams studio, you must double click on the BuildConfig of
       your application's main composite and then select "Other" in the
       dialog that is opened. In the "C++ compiler options", you must add
       the following.
       
       -I <Full path to your com.ibm.streamsx.sttgateway toolkit>/impl/include
       
       (e-g): -I /home/xyz/streamsx.sttgateway/com.ibm.streamsx.sttgateway/impl/include
       
   --> In Streams studio, you must double click on the BuildConfig of
       your application's main composite and then select "Other" in the
       dialog that is opened. In the "Additional SPL compiler options", you must add
       the following.
 
       --c++std=c++11
       
   --> If you are building your application from the command line, please refer to the
       Makefile provided in the AudioFileWatsonSTT example shipped with
       this toolkit. Before using that Makefile, you must set the 
       STREAMS_STTGATEWAY_TOOLKIT environment variable to point to the full path of   
       your streamsx.sttgateway/com.ibm.streamsx.sttgateway directory.
       To build your own applications, you can do the same as done in that Makefile.
       
Common log messages generated by the Websocket library
------------------------------------------------------
There will be many log messages from the underlying C++ Websocket library
routinely getting written in the Streams WatsonSTT operator log files.
Such log messages are about making a connection to the Watson STT service,
disconnecting from the Watson STT service, receiving Websocket control frames
during the ongoing transcription etc. For example, in the absence of any 
audio data available for transcription for a prolonged period (30 seconds or more),
the Watson STT service will terminate the Websocket connection to better utilize 
its back-end resources. In that case, a set of messages as shown below will be logged. 

[2018-08-11 10:07:35] [control] Control frame received with opcode 8
[2018-08-11 10:07:35] [application] Websocket connection closed with the Watson STT service.
[2018-08-11 10:07:35] [disconnect] Disconnect close local:[1011,see the previous message for the error details.] remote:[1011,see the previous message for the error details.]

These messages are normal and they don't reflect any error in the 
Streams WatsonSTT operator. When the audio data becomes available later,
the WatsonSTT operator will reestablish the Websocket connection and continue
the transcription task. Only when you see any abnormal runtime exception
errors, you should take actions to diagnose and fix the problem.

Official documentation for this toolkit
---------------------------------------
https://ibmstreams.github.io/streamsx.sttgateway/
============================================================
