namespace com.ibm.streamsx.sttgateway.watson;

	/**
	 * This type STTResult_t is the basic STT result type with essential transcription results.
	 */
type STTResult_t = 
		boolean transcriptionCompleted,
		rstring sttErrorMessage,
		boolean finalizedUtterance,
		int32 utteranceNumber,
		float64 confidence,
		float64 utteranceStartTime,
		float64 utteranceEndTime,
		rstring utteranceText,
		rstring conversationId;

	/**
	 * This type STTAllResult_t is the STT result type with all transcription results.
	 */
type STTAllResult_t =
		boolean transcriptionCompleted,
		rstring sttErrorMessage,
		boolean finalizedUtterance,
		int32 utteranceNumber,
		float64 confidence,
		float64 utteranceStartTime,
		float64 utteranceEndTime,
		rstring utteranceText,
		list<rstring> utteranceAlternatives,
		list<rstring> utteranceWords,
		list<float64> utteranceWordsConfidences,
		list<float64> utteranceWordsStartTimes,
		list<float64> utteranceWordsEndTimes,
		list<list<rstring>> wordAlternatives,
		list<list<float64>> wordAlternativesConfidences,
		list<float64> wordAlternativesStartTimes,
		list<float64> wordAlternativesEndTimes,
		list<int32> utteranceWordsSpeakers,
		list<float64> utteranceWordsSpeakersConfidences,
		list<tuple<float64 startTime, int32 speaker, float64 confidence>> utteranceWordsSpeakerUpdates,
		map<rstring, list<tuple<float64 startTime, float64 endTime, float64 confidence>>> keywordsSpottingResults,
		rstring conversationId;


/**
 * Function hourMinuteSecondMillisec
 * 
 * build a string from a timestamp with format <hour>:<minute>:<second>.<millisecond>
 * 
 * @param t input time
 * 
 * @return the formatted time string
 */
public rstring hourMinuteSecondMillisec(timestamp t) {
	mutable Sys.tm mytime = {};
	time(t, mytime);
	rstring res = strftime(mytime, "%H:%M:%S");
	uint32 milliseconds = getNanoseconds(t) / 1000000u;
	return res + "." + addLeadingZero3((rstring)milliseconds);
}

rstring addLeadingZero3(rstring number) {
	if (length(number) == 1)
		return "00" + number;
	else if (length(number) == 2)
		return "0" + number;
	else
		return number;
}

