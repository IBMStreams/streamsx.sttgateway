/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2019, 2021
==============================================
*/

/*
============================================================
First created on: Sep/17/2019
Last modified on: Sep/17/2021
============================================================
*/

/* Additional includes go here */
#include <websocketpp/config/asio.hpp>
#include <websocketpp/server.hpp>
#include <iostream>
#include <fstream>
#include <iterator>
#include <algorithm>
#include <vector>
// Operator metrics related include files.
#include <SPL/Runtime/Common/Metric.h>
#include <SPL/Runtime/Operator/OperatorMetrics.h>

<%SPL::CodeGen::headerPrologue($model);%>

#define VGW_OPENED_A_WS_CONNECTION 1
#define VGW_STARTED_AN_STT_SESSION 2
#define VGW_ENDED_AN_STT_SESSION 3

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:
	// Websocket related type definitions.
	// Define types for two different server endpoints, 
	// one for each config we are using.
	typedef websocketpp::server<websocketpp::config::asio> server_plain;
	typedef websocketpp::server<websocketpp::config::asio_tls> server_tls;

	// Alias some of the bind related functions as they are a bit long
	// Type of the ssl context pointer is long so alias it
	typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;
	
	// Operator related member variables
	std::string operatorPhysicalName;
	SPL::int32 udpChannelNumber;
	SPL::uint32 tlsPort;
	std::string certificateFileName;
	std::string certificatePassword;
	SPL::boolean nonTlsEndpointNeeded;
	SPL::uint32 nonTlsPort;
	SPL::float64 initDelay;
	SPL::boolean vgwLiveMetricsUpdateNeeded;
	bool websocketLoggingNeeded;
	bool vgwSessionLoggingNeeded;
	SPL::int64 vgwStaleSessionPurgeInterval;
	SPL::uint32 maxConcurrentCallsAllowed;
	SPL::uint32 activeConcurrentCallsCnt;
	bool ipv6Available;
	server_plain endpoint_plain;
	server_tls endpoint_tls;
	SPL::boolean tlsEndpointStarted;
	SPL::boolean nonTlsEndpointStarted;
	SPL::boolean boostAsioServiceRunning;
	SPL::int64 timeOfPreviousStaleSessionRemoval;
	// This map holds the phone numbers of the agent and 
	// the customer for a given VGW session id.
	//
	// Key: vgeSessionId_vgwIsCaller
	// Value: Phone Number
	// e-g: 
	// 3726389_0 : sip:+15712487798@169.61.56.229
	// 3726389_1 : sip:+19149453000@4.55.11.163:5060
	std::map<std::string, std::string> vgwSessionPhoneNumbersMap;

	// This map holds the VGW session ids whose calls are being
	// throttled when we already reached the maximum allowed 
	// limit of concurrent calls.
	std::map<std::string, bool> callsBeingThrottledMap;
	
	SPL::uint64 nVoiceCallsProcessed;
	SPL::uint64 nSpeechDataBytesReceived;
	// This particular metric can also be treated as the number of speech packets received from VGW.
	SPL::uint64 nOutputTuplesSent;
	SPL::uint64 nVoiceCallsThrottled;
	
	struct connection_metadata {
		bool isTlsConnection;
		SPL::rstring callStartDateTime;
		SPL::int64 callStartTimeInEpochSeconds;
		// VGW session status will carry the following values:
		// 1 = VGW client opened a Websocket connection.
		// 2 = VGW client started the STT transcription along with the call meta data.
		// 3 = VGW client ended the STT transcription.
	    int32_t vgwSessionStatus;
	    int64_t vgwSessionStartTime;
	    int32_t speechPacketsReceivedCnt;
	    int32_t speechDataBytesReceived;
	    // Following are the call metadata details sent by the IBM Voice Gateway. 
	    std::string vgwSessionId;
	    std::string vgwSIPCallID;
	    // This field seems to carry either the agent phone number or the
	    // caller phone number depending on who is on a given voice channel.
	    // e-g: sip:+15712487798@169.61.56.229
	    // (OR) sip:+19149453000@4.55.11.163:5060
	    // Read more details in the commentary provided for the other fields below.
		std::string vgwParticipantURI;
		std::string vgwTenantID;
		// According to the VGW team, SBC sends the caller's number
		// in this field to VGW which simply passes it through.
		// VGW team says this could be the caller's number or the Twillio SIP trunk number.
		// But, in my tests I only noticed a string that looks like the following which
		// has no phone number at all.
		// e-g: sip:SIPREC-SRS@184.172.233.76
		// By doing more tests, I observed something (as of Nov/02/2019) that 
		// I documented in the vgwParticipantURI field above. For now, I'm going to use 
		// the vgwParticipantURI field's value in combintation with the vgwIsCaller 
		// and/or the vgwVoiceChannelNumber fields that appear below to assign the 
		// phone number as that of the agent or the caller.
		std::string vgwSIPToURI;
		// This tells if this connection carries caller's or agent's speech data.
		bool vgwIsCaller;
		// This field indicates the SIP invite custom header named Ciso-Guid.
		// This field will be sent in the SIPREC metadata only if the IBM Voice Gateway
		// product is configured to parse this field from the SIP headers.
		std::string ciscoGuid;
		// 
		// This indicates the voice channel number i.e. 1 or 2.
		// Whoever (caller or agent) sends the first round of speech data bytes will
		// get assigned a voice channel of 1. The next one to follow will get
		// assigned a voice channel of 2.
		// In my tests of calling into a call center i.e. a virtual agent's number,
		// I noticed that voice channel 1 always goes to the agent and 
		// voice channel 2 always goes to the caller/customer. We can also use this
		// clue to decide whether the phone number appearing in the vgwParticipantURI
		// field belongs to an agent or a caller/customer.
		int32_t vgwVoiceChannelNumber;
	};
	
	// This technique of storing and tracking the client connection specific
	// details via an associative container is well discussed in this URL:
	// https://www.zaphoyd.com/websocketpp/manual/common-patterns/storing-connection-specificsession-information
	typedef std::map<websocketpp::connection_hdl, 
		connection_metadata, std::owner_less<websocketpp::connection_hdl>> con_map;
	
	// This map's key is connection_hdl and value is the connection_metadata structure.
	con_map client_connections_map;
	// This map's key is vgwSessionId and value is a 
	// list of vgwSessionTime values for the 
	// active speech channels in that vgw session id.
	// This map is used to detect when all the active speech channels in
	// a vgwSessionId are fully done in order to send an 
	// EndOfCall signal.
	std::map<std::string, SPL::list<int64_t>> vgw_session_id_map; 
	
	// Custom metrics for this operator.
	Metric *nVoiceCallsProcessedMetric;
	Metric *nVoiceCallsThrottledMetric;
	Metric *nSpeechDataBytesReceivedMetric;
	Metric *nOutputTuplesSentMetric;
	Metric *nTlsPortMetric;
	Metric *nNonTlsPortNeededMetric;
	Metric *nNonTlsPortMetric;
	
	// Constructor
	MY_OPERATOR();

	// Destructor
	virtual ~MY_OPERATOR(); 

	// Notify port readiness
	void allPortsReady(); 

	// Notify pending shutdown
	void prepareToShutdown(); 

	// Processing for source and threaded operators   
	void process(uint32_t idx);
    
	// Tuple processing for mutating ports 
	void process(Tuple & tuple, uint32_t port);
    
	// Tuple processing for non-mutating ports
	void process(Tuple const & tuple, uint32_t port);

	// Punctuation processing
	void process(Punctuation const & punct, uint32_t port);

	// Websocket non_tls client connection open handler.
	void on_open_non_tls(websocketpp::connection_hdl hdl);

	// Websocket TLS client connection open handler.
	void on_open_tls(websocketpp::connection_hdl hdl);
		
	// Websocket client connection common open handler.
	void on_open(websocketpp::connection_hdl hdl, bool isTlsConnection);	
		
	// Websocket message reception event handler
	template <typename EndpointType>
	void on_message(EndpointType* s, websocketpp::connection_hdl hdl,
	    typename EndpointType::message_ptr msg);
	
	// Websocket client connection close handler.
	void on_close(websocketpp::connection_hdl hdl);
	
	// Websocket TLS binding event handler
	context_ptr on_tls_init(websocketpp::connection_hdl hdl);
	
	// HTTP event handler (for non_tls HTTP POST messages)
	void on_http_message_non_tls(websocketpp::connection_hdl hdl);
		
	// HTTP event handler (for TLS HTTPS POST messages)
	void on_http_message_tls(websocketpp::connection_hdl hdl);
		
	// HTTP common event handler (both for HTTP and HTTPS POST messages)
	void on_http_message(websocketpp::connection_hdl hdl, 
		bool isTlsConnection,
		server_plain::connection_ptr & server_non_tls_con,
		server_tls::connection_ptr & server_tls_con);

	// Callback method needed within the TLS event handler.
	std::string get_private_key_password();
	
	// It validates the given client connection.
	bool validate_client(websocketpp::connection_hdl hdl, 
		bool isTlsConnection, bool isHttpConnection,
		server_plain::connection_ptr & server_non_tls_con,
		server_tls::connection_ptr & server_tls_con);
	
	// Method that looks up connection metadata for a connection handle in our associate container.
	MY_OPERATOR::connection_metadata& get_con_metadata_from_hdl(websocketpp::connection_hdl hdl);

private:
	// These are the output attribute assignment functions for this operator.
	std::string getIBMVoiceGatewaySessionId(std::string const & vgwSessionId);
	bool isCustomerSpeechData(bool const & isThisSpeechDataFromCustomer);
	int32_t getTupleCnt(int32_t const & emittedTupleCnt);
	int32_t getTotalSpeechDataBytesReceived(int32_t const & totalSpeechDataBytesReceived);
	int32_t getVoiceChannelNumber(int32_t const & voiceChannelNumber);
	std::string getAgentOrCallerPhoneNumber(std::string const & vgwSessionId, bool const & vgwIsCaller);
	SPL::rstring getCallStartDateTime(SPL::rstring const & callStartDateTime);
	SPL::int64 getCallStartTimeInEpochSeconds(SPL::int64 const & callStartTimeInEpochSeconds);
	SPL::rstring getCiscoGuid(SPL::rstring const & ciscoGuid);
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

