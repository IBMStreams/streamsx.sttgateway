/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2019
==============================================
*/

/*
==============================================
First created on: Jun/11/2019
Last modified on: Jun/11/2019

This non-main composite provides a way to generate a
new IAM access token for the IBM STT service on
public and private cloud. IBM Streams applications using
the streamsx.sttgateway can use/invoke this non-main composite to
generate and periodically refresh the IAM access token which will be
required by the WatsonSTT operator. Without having an
unexpired IAM access token, STT service will not allow the
speech to text transcription happen.
==============================================
*/

namespace com.ibm.streamsx.sttgateway.watson;

// This non-main composite uses JSON native functions.
// So, the following toolkit (v1.4.6 or higher) is a dependency.
use com.ibm.streamsx.json::*;

// This type represents the data format for the 
// result returned by the "Generate IAM access token" and the
// "Refresh IAM access token" CURL commands.
type IamAccessToken_t = rstring access_token, rstring refresh_token, 
	rstring scope, int64 expiration, rstring token_type, int64 expires_in;

public composite IAMAccessTokenGenerator(output IamAccessToken) {
	param
		// IMPORTANT: The WatsonSTT operator uses Websocket to communicate with the 
		// Watson STT cloud service. For the Websocket interface, one must use 
		// the unexpired IAM access token (generated by using your 
		// STT service instance's API key). So, user must provide here his/her API key.
		// We have some logic below that will use the user provided API key to
		// generate the IAM access token and send that to the WatsonSTT operator.
		// There is additional logic available below to keep refreshing that
		// IAM access token periodically in order for it to stay unexpired.
		// https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-websockets#WSopen
		// 
		// This composite accepts these four operator parameters.
		expression<rstring> $sttApiKey;
		// Specify either the public or private cloud IAM Token fetch/refresh URL.
		expression<rstring> $sttIAMTokenURL;
		// Specify the access token refresh interval in minutes.
		expression<float64> $sttAccessTokenRefreshInterval;
		// Initial delay before generating the IAM access token.
		expression<float64> $initDelay;

	graph
		// ========== START OF GENERATING AND REFRESHING AN IAM ACCESS TOKEN ==========
		// In order to keep doing the STT transcription continuously, both the
		// IBM STT service on public and private cloud will require an
		// unexpired IAM access token. In this non-main composite, we will 
		// generate a new IAM access token by using the user-provided IBM STT service
		// instance's app key and the IAM access token generation URL. In addition, we will
		// also keep refreshing the access token for it to stay valid and not get expired.
		// By default, an IAM access token will expire after one hour. So, we will do a 
		// special logic here to keep the IAM access token unexpired.
		(stream<boolean signal> IamTokenSignal) = Beacon() {
			param
				initDelay: $initDelay;
				period: $sttAccessTokenRefreshInterval * 60.00;
		}
	
		// Prepare the data required to generate a new IAM access token.
		(stream<rstring jsonString> IamAccessTokenJson as IATJ) = 
			Custom(IamTokenSignal as ITS) {
			logic
				state: {
					mutable int32 _tupleCnt = 0;
					mutable IamAccessTokenJson _oTuple = {};
				}
				onTuple ITS: {
					if (++_tupleCnt > 1) {
						// We must generate a new IAM access token only once within this application.
						// After generating it once, all we have to do is to keep refreshing it at
						// a periodic interval in a different operator below.
						return;
					}
					
					// Let us form a CURL command to generate a new IAM access token.
					mutable rstring curlCommand = "";
					curlCommand += 'curl -s -k -X POST ';
					curlCommand += '--header "Authorization: Basic Yng6Yng=" ';
					curlCommand += '--header "Content-Type: application/x-www-form-urlencoded" ';
					curlCommand += '--header "Accept: application/json" ';
					curlCommand += '--data-urlencode "grant_type=urn:ibm:params:oauth:grant-type:apikey" ';
					curlCommand += '--data-urlencode "apikey=' + $sttApiKey + '" ';
					curlCommand += '"' + $sttIAMTokenURL + '"';
					
					mutable rstring resultStringOutput = "";
					// This is a C++ native function available as part of the
					// streamsx.sttgateway toolkit (look in impl/include/CppUtilFunctions.h).
					int32 rc = launch_app(curlCommand, resultStringOutput);
					
					if (rc == 0) {
						_oTuple.jsonString = resultStringOutput;
						submit(_oTuple, IATJ);
					} else {
						appTrc(Trace.error, 
							"Error occurred while running the Curl command to generate a new IAM access token. Error=" +
							resultStringOutput + ". Aborting now.");
						abort();
					}
				}
		}
		
		// Convert the generated IAM access token JSON string into a tuple.
		(stream<IamAccessToken_t> GeneratedIamAccessToken as GIAT;
		 stream<rstring jsonString> JsonConversionError as JCE) = JSONToTuple(IamAccessTokenJson) {
		}

		// This operator converts the generated IAM access token JSON string into a tuple.
		// It then stores the generated IAM access token in memory. After that, it does the
		// periodic refreshing of that stored access token.
		// It also sends the generated and refreshed access tokens out to downstream consumption.
		(stream<IamAccessToken_t> IamAccessToken as IAT) = 
			Custom(GeneratedIamAccessToken as GIAT; JsonConversionError as JCE; 
			IamTokenSignal as ITS) {
			logic
				state: {
					mutable int32 _iamAccessTokenRefreshCount = 0;
					mutable IamAccessToken_t _iamAccessToken = {};
				}
				
				onTuple JCE: {
					appTrc(Trace.error, "Error occurred while converting the " +
						"IAM access token JSON string to a tuple. " +
						"Error=" + JCE.jsonString + ". Aborting now.");
					abort();
				}
				
				onTuple GIAT: {
					// Store the IAM access token for future refresh activities.
					assignFrom(_iamAccessToken, GIAT);
					// Send the newly generated access token for downstream consumption.
					submit(_iamAccessToken, IAT);
				}
				
				onTuple ITS: {
					// It is time now to do a periodic refresh of the IAM access token.
					if (++_iamAccessTokenRefreshCount <= 1) {
						// We must refresh an existing IAM access token only from the
						// second timer tick onwards. During the first timer tick,
						// IAM access token gets generated in the operators above.
						// So, we will skip the first timer signal and start refreshing
						// the access token in the subsequent timer ticks.
						return;
					}
					
					// Let us form a CURL command to refresh our existing IAM access token.
					mutable rstring curlCommand = "";
					curlCommand += 'curl -s -k -X POST ';
					curlCommand += '--header "Authorization: Basic Yng6Yng=" ';
					// curlCommand += '--header "Content-Type: application/x-www-form-urlencoded" ';
					// curlCommand += '--header "Accept: application/json" ';
					curlCommand += '--data-urlencode "grant_type=refresh_token" ';
					curlCommand += '--data-urlencode "refresh_token=' + 
						_iamAccessToken.refresh_token + '" ';
					curlCommand += '"' + $sttIAMTokenURL + '"';
					
					mutable rstring resultStringOutput = "";
					int32 rc = launch_app(curlCommand, resultStringOutput);
					
					if (rc == 0) {
						_iamAccessToken = (IamAccessToken_t){};
						extractFromJSON(resultStringOutput, _iamAccessToken);
						appTrc(Trace.error, "IAM access token refreshed successfully.");
						// Send the refreshed token for downstream consumption.
						submit(_iamAccessToken, IAT);
					} else {
						appTrc(Trace.error, 
							"Error occurred while running the Curl command to refresh an " +
							"existing IAM access token. Error=" +
							resultStringOutput + ". Aborting now.");
						abort();
					}

				}
		}
		// ========== END OF GENERATING AND REFRESHING AN IAM ACCESS TOKEN ==========
} // End of the non-main composite

