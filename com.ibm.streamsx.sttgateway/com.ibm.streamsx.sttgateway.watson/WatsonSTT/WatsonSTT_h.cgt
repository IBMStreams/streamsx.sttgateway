/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2018, 2019
==============================================
*/

/*
============================================================
First created on: Jul/01/2018
Last modified on: Jun/11/2019
============================================================
*/

/* Additional includes go here */
#include <WatsonSTTImpl.hpp>

<%SPL::CodeGen::headerPrologue($model);%>

/*
 * Make this operator a composition of the MY_BASE_OPERATOR and the implementation class: WatsonSTTImpl
 * Make the MY_OPERATOR class as slim as possible to have the most of the implementation in a pure c++ file
 * So we can take the advantages of c++ editor
 */
class MY_OPERATOR : public MY_BASE_OPERATOR, public com::ibm::streams::sttgateway::WatsonSTTImpl<MY_OPERATOR, MY_BASE_OPERATOR::OPort0Type> {

public:
	// Alias for the type of the implementation class
	typedef com::ibm::streams::sttgateway::WatsonSTTImpl<MY_OPERATOR, OPort0Type> Impl;
	typedef com::ibm::streams::sttgateway::WatsonSTTConfig Conf;
	
	// Constructor
	MY_OPERATOR();
	
	// Destructor
	virtual ~MY_OPERATOR();
	
	// Notify port readiness
	void allPortsReady();
	
	// Notify pending shutdown
	void prepareToShutdown();
	
	// Tuple processing for non-mutating ports 0 and 1
	void process(Tuple const & tuple, uint32_t port);
	
	// Punctuation processing
	void process(Punctuation const & punct, uint32_t port);
	
	// Processing for websocket client threads
	void process(uint32_t idx);

	//Create a output tuple and auto assign values from an input tuple
	OPort0Type* createOutTupleAndAutoAssign(IPort0Type const& inTuple);
	
	// append the error message to the error attribute of the output tuple
	void appendErrorAttribute(OPort0Type * tuple, std::string const & errorMessage);
	
	// Assign result attributes except speaker results and transcription complete to output tuple
	void setResultAttributes(
			OPort0Type * tuple,
			int32_t utteranceNumber_,
			std::string const & utteranceText_,
			bool final_,
			float confidence_,
			SPL::list<SPL::rstring> const & utteranceAlternatives_,
			SPL::list<SPL::list<SPL::rstring>> const & wordAlternatives_,
			SPL::list<SPL::list<SPL::float64>> const & wordAlternativesConfidences_,
			SPL::list<SPL::float64> const & wordAlternativesStartTimes_,
			SPL::list<SPL::float64> const & wordAlternativesEndTimes_,
			SPL::list<SPL::rstring> const & utteranceWords_,
			SPL::list<SPL::float64> const & utteranceWordsConfidences_,
			SPL::list<SPL::float64> const & utteranceWordsEndTimes_,
			SPL::float64 utteranceStartTime_,
			SPL::float64 utteranceEndTime_,
			SPL::map<SPL::rstring, SPL::list<SPL::map<SPL::rstring, SPL::float64>>> const & keywordsSpottingResults_
	);
	
	// Assign speaker result to output tuple
	void setSpeakerResultAttributes(OPort0Type * tuple);
	
	// Assign transcription complete attribute to output tuple
	void setTranscriptionCompleteAttribute(OPort0Type * tuple);
};

<%SPL::CodeGen::headerEpilogue($model);%>
