/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2018, 2019
==============================================
*/

/*
============================================================
First created on: Jul/01/2018
Last modified on: Jun/11/2019
============================================================
*/

/* Additional includes go here */
#include <WatsonSTTImpl.hpp>

#include <websocketpp/config/asio_client.hpp>
#include <websocketpp/client.hpp>
#include <iostream>
#include <fstream>
#include <iterator>
#include <algorithm>
#include <vector>
// Operator metrics related include files.
#include <SPL/Runtime/Common/Metric.h>
#include <SPL/Runtime/Operator/OperatorMetrics.h>

<%SPL::CodeGen::headerPrologue($model);%>

<%
# Check the input port 0 i.e. the first input port. 
my $inputPort = $model->getInputPortAt(0);
my $inputTupleName = $inputPort->getCppTupleName();
my $audioInputAsBlob = 0;
my $inputAttrs = $inputPort->getAttributes();

foreach my $inputAttr (@$inputAttrs) {
	my $inAttrName = $inputAttr->getName();
	my $inAttrType = $inputAttr->getSPLType();
	
	if ($inAttrName eq "speech") {
		
		if ($inAttrType eq "rstring") {
			# This tuple attribute will carry the name of a file containing the audio data.
			$audioInputAsBlob = 0;
		}
		
		if ($inAttrType eq "blob") {
			# This tuple attribute will carry a blob containing either full or partial audio data.
			$audioInputAsBlob = 1;
		}
	}
}
%>

class MY_OPERATOR : public MY_BASE_OPERATOR {

	// Websocket related type definitions.
	//typedef websocketpp::client<websocketpp::config::asio_tls_client> client;
	// Pull out the type of messages sent by our config
	//typedef websocketpp::config::asio_tls_client::message_type::ptr message_ptr;
	//typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;


public:
	// Constructor
	MY_OPERATOR();
	
	// Destructor
	virtual ~MY_OPERATOR(); 
	
	// Notify port readiness
	void allPortsReady(); 
	
	// Notify pending shutdown
	void prepareToShutdown(); 
	
	// Tuple processing for mutating data port 0
	void process(Tuple & tuple, uint32_t port);
	
	// Tuple processing for non-mutating authentication port 1
	void process(Tuple const & tuple, uint32_t port);
	
	// Punctuation processing
	void process(Punctuation const & punct, uint32_t port);
	
	// Processing for websocket client threads
	void process(uint32_t idx);

	//Create a output tuple and auto assign values from an input tuple
	OPort0Type* createOutTupleAndAutoAssign(IPort0Type const& inTuple);
	
	// Assign the error message to output tuple
	void setErrorAttribute(OPort0Type * tuple, std::string const & errorMessage);
	
	// Assign result attributes except speaker results and transcription complete to output tuple
	void setResultAttributes(
			OPort0Type * tuple,
			int32_t utteranceNumber_,
			std::string const & utteranceText_,
			bool final_,
			float confidence_,
			std::string const & fullTranscriptionText_,
			SPL::list<SPL::rstring> const & utteranceAlternatives_,
			SPL::list<SPL::list<SPL::rstring>> const & wordAlternatives_,
			SPL::list<SPL::list<SPL::float64>> const & wordAlternativesConfidences_,
			SPL::list<SPL::float64> const & wordAlternativesStartTimes_,
			SPL::list<SPL::float64> const & wordAlternativesEndTimes_,
			SPL::list<SPL::rstring> const & utteranceWords_,
			SPL::list<SPL::float64> const & utteranceWordsConfidences_,
			SPL::list<SPL::float64> const & utteranceWordsEndTimes_,
			SPL::float64 utteranceStartTime_,
			SPL::float64 utteranceEndTime_,
			SPL::map<SPL::rstring, SPL::list<SPL::map<SPL::rstring, SPL::float64>>> const & keywordsSpottingResults_
	);
	
	// Assign speaker result to output tuple
	void setSpeakerResultAttributes(OPort0Type * tuple);
	
	// Assign transcription complete attribute to output tuple
	void setTranscriptionCompleteAttribute(OPort0Type * tuple);
private:
	// All the public methods below used to be static methods with
	// a static keyword at the beginning of every prototype 
	// declaration. On Aug/28/2018, I removed the need for them to be static.
	//
	
	
	com::ibm::streams::sttgateway::WatsonSTTImpl<MY_OPERATOR, OPort0Type> impl; //Implementation
}; 

<%SPL::CodeGen::headerEpilogue($model);%>
