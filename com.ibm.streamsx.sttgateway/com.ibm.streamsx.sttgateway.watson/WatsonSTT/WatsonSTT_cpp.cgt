/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2018, 2019
==============================================
*/

/*
============================================================
First created on: Jul/01/2018
Last modified on: Nov/06/2019

Please refer to the sttgateway-tech-brief.txt file in the 
top-level directory of this toolkit to read about 
what this toolkit does, how it can be built and 
how it can be used in the Streams applications.

High-level business need for this operator is explained here:
https://github.com/IBMStreams/administration/issues/136

https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-websockets#advantages
============================================================
*/

/* Additional includes go here */

// Verify the input tuple attribute name and then read the operator parameters.
<%
	require SttGatewayResource;

	my $ccContext = $model->getContext()->getOptionalContext("ConsistentRegion");
	if (defined $ccContext) {
		SPL::CodeGen::exitln(SttGatewayResource::STTGW_CONSISTENT_CHECK("WatsonSTT"),
				$model->getContext()->getSourceLocation());
	}

	# Check the input port 0 i.e. the first input port. 
	my $inputPort = $model->getInputPortAt(0);
	my $inputTupleName = $inputPort->getCppTupleName();
	my $audioInputAsBlob = undef;
	my $inputAttrs = $inputPort->getAttributes();
	my $speechAttributeFound = 0;
	my $speechAttributeType = "none";
		foreach my $inputAttr (@$inputAttrs) {
		my $inAttrName = $inputAttr->getName();
		my $inAttrType = $inputAttr->getSPLType();
		
		if ($inAttrName eq "speech") {
			$speechAttributeFound = 1;
			
			if ($inAttrType eq "rstring") {
				# This tuple attribute will carry the name of a file containing the audio data.
				$audioInputAsBlob = 0;
				$speechAttributeType = $inputAttr->getCppType();
			}
			
			if ($inAttrType eq "blob") {
				# This tuple attribute will carry a blob containing either full or partial audio data.
				$audioInputAsBlob = 1;
				$speechAttributeType = $inputAttr->getCppType();
			}
		}
	}
	print "// audioInputAsBlob=$audioInputAsBlob speechAttributeType=$speechAttributeType\n";
	if ($speechAttributeFound == 0 ) {
		SPL::CodeGen::exitln(SttGatewayResource::STTGW_INP_ATTRIBUTE_CHECK1("WatsonSTT", "speech"),
				$model->getContext()->getSourceLocation());
	}
	if (!(defined($audioInputAsBlob))) {
		SPL::CodeGen::exitln(SttGatewayResource::STTGW_INP_ATTRIBUTE_TYPE_CHECK1("WatsonSTT", "speech", "rstring", "blob"),
				$model->getContext()->getSourceLocation());
	}
	
	# Check the input port number 1 i.e. the second input port.
	my $inputPort2 = $model->getInputPortAt(1);
	my $inputTupleName2 = $inputPort2->getCppTupleName();
	my $accessTokenAsString = undef;	
	my $inputAttrs2 = $inputPort2->getAttributes();
	my $accessTokenAttributeFound = 0;
		foreach my $inputAttr2 (@$inputAttrs2) {
		my $inAttrName2 = $inputAttr2->getName();
		my $inAttrType2 = $inputAttr2->getSPLType();
		
		if ($inAttrName2 eq "access_token") {
			$accessTokenAttributeFound = 1;
			
			if ($inAttrType2 eq "rstring") {
				# This tuple attribute will carry the IAM access token.
				$accessTokenAsString = 1;
			}
		}
	}
	if ($accessTokenAttributeFound == 0 ) {
		SPL::CodeGen::exitln(SttGatewayResource::STTGW_INP_ATTRIBUTE_CHECK2("WatsonSTT", "accessToken"),
				$model->getContext()->getSourceLocation());
	}
	if (!(defined($accessTokenAsString))) {
		SPL::CodeGen::exitln(SttGatewayResource::STTGW_INP_ATTRIBUTE_TYPE_CHECK2("WatsonSTT", "accessToken", "rstring"),
				$model->getContext()->getSourceLocation());
	}
	
	my $sttResultMode = $model->getParameterByName("sttResultMode");
	# Default: complete for full text result
	$sttResultMode = $sttResultMode ? $sttResultMode->getValueAt(0)->getSPLExpression() : "complete";
	print "// sttResultMode = $sttResultMode\n";

	# all attribute name variables for output functions
	my $getUtteranceNumberName = "";
	my $getUtteranceTextName = "";
	my $isFinalizedUtteranceName = "";
	my $getConfidenceName = "";
	my $getSTTErrorMessageName = "";
	my $isTranscriptionCompletedName = "";
	my $getUtteranceAlternativesName = "";
	my $getWordAlternativesName = "";
	my $getWordAlternativesConfidencesName = "";
	my $getWordAlternativesStartTimesName = "";
	my $getWordAlternativesEndTimesName = "";
	my $getUtteranceWordsName = "";
	my $getUtteranceWordsConfidencesName = "";
	my $getUtteranceWordsStartTimesName = "";
	my $getUtteranceWordsEndTimesName = "";
	my $getUtteranceStartTimeName = "";
	my $getUtteranceEndTimeName = "";
	my $getUtteranceWordsSpeakersName = "";
	my $getUtteranceWordsSpeakersConfidencesName = "";
	my $getUtteranceWordsSpeakerUpdatesName = "";
	my $getKeywordsSpottingResultsName = "";

	# determine the requirements from output functions
	my $wordTimestampNeeded = 0;
	my $wordConfidenceNeeded = 0;
	my $identifySpeakers = 0;
	my $speakerUpdatesNeeded = 0;
	my $utteranceAlternativesNeeded = 0;
	my $wordAlternativesNeeded = 0;
	my $isTranscriptionCompletedRequested = 0;
	my $keywordsSpottingResultType = "";
	my $oport = $model->getOutputPortAt(0); 
	foreach my $attribute (@{$oport->getAttributes()}) {
		my $name = $attribute->getName(); 
		my $paramValues = $attribute->getAssignmentOutputFunctionParameterValues();
		my $op = $attribute->getAssignmentOutputFunctionName(); 
		my $attributeType = $attribute->getSPLType();

		# set the name variables
		if ($op eq "getUtteranceNumber") {
			$getUtteranceNumberName = "$name";
		} elsif ($op eq "getUtteranceText") {
			$getUtteranceTextName = "$name";
		} elsif ($op eq "isFinalizedUtterance") {
			$isFinalizedUtteranceName = "$name";
		} elsif ($op eq "getConfidence") {
			$getConfidenceName = "$name";
		} elsif ($op eq "getSTTErrorMessage") {
			$getSTTErrorMessageName = "$name";
		} elsif ($op eq "isTranscriptionCompleted") {
			$isTranscriptionCompletedName = "$name";
		} elsif ($op eq "getUtteranceAlternatives") {
			$getUtteranceAlternativesName = "$name";
		} elsif ($op eq "getWordAlternatives") {
			$getWordAlternativesName = "$name";
		} elsif ($op eq "getWordAlternativesConfidences") {
			$getWordAlternativesConfidencesName = "$name";
		} elsif ($op eq "getWordAlternativesStartTimes") {
			$getWordAlternativesStartTimesName = "$name";
		} elsif ($op eq "getWordAlternativesEndTimes") {
			$getWordAlternativesEndTimesName = "$name";
		} elsif ($op eq "getUtteranceWords") {
			$getUtteranceWordsName = "$name";
		} elsif ($op eq "getUtteranceWordsConfidences") {
			$getUtteranceWordsConfidencesName = "$name";
		} elsif ($op eq "getUtteranceWordsStartTimes") {
			$getUtteranceWordsStartTimesName = "$name";
		} elsif ($op eq "getUtteranceWordsEndTimes") {
			$getUtteranceWordsEndTimesName = "$name";
		} elsif ($op eq "getUtteranceStartTime") {
			$getUtteranceStartTimeName = "$name";
		} elsif ($op eq "getUtteranceEndTime") {
			$getUtteranceEndTimeName = "$name";
		} elsif ($op eq "getUtteranceWordsSpeakers") {
			$getUtteranceWordsSpeakersName = "$name";
		} elsif ($op eq "getUtteranceWordsSpeakersConfidences") {
			$getUtteranceWordsSpeakersConfidencesName = "$name";
		} elsif ($op eq "getUtteranceWordsSpeakerUpdates") {
			$getUtteranceWordsSpeakerUpdatesName = "$name";
		} elsif ($op eq "getKeywordsSpottingResults") {
			$getKeywordsSpottingResultsName = "$name";
		}
		# check requirements
		if ($op eq "getUtteranceWordsConfidences") {
			$wordConfidenceNeeded = 1;
		} elsif (($op eq "getUtteranceWordsStartTimes") || ($op eq "getUtteranceWordsEndTimes")) {
			$wordTimestampNeeded = 1;
		} elsif (($op eq "getUtteranceStartTime") || ($op eq "getUtteranceEndTime")) {
			$wordTimestampNeeded = 1;
		} elsif ($op eq "getUtteranceWordsSpeakers") {
			$identifySpeakers = 1;
			$wordTimestampNeeded = 1; # timestamps are required for the speaker label check
		} elsif ($op eq "getUtteranceWordsSpeakersConfidences") {
			$identifySpeakers = 1;
			$wordTimestampNeeded = 1;
		} elsif ($op eq "getUtteranceWordsSpeakerUpdates") {
			if (SPL::CodeGen::Type::isList($attributeType)) {
				my $elementType = SPL::CodeGen::Type::getElementType($attributeType);
				if ($elementType eq "tuple<float64 startTime,int32 speaker,float64 confidence>") {
					$identifySpeakers = 1;
					$wordTimestampNeeded = 1;
					$speakerUpdatesNeeded = 1;
				} else {
					SPL::CodeGen::exitln("Attribute %s has wrong type! It must be of type list<tuple<float64 startTime,int32 speaker,float64 confidence>>", "$name", $oport->getSourceLocation());
				}
			} else {
				SPL::CodeGen::exitln("Attribute %s must be a list type! It must be of type list<float64 startTime,int32 speaker,float64 confidence>>", "$name", $oport->getSourceLocation());
			}
		} elsif ($op eq "getUtteranceAlternatives") {
			$utteranceAlternativesNeeded = 1;
		} elsif (($op eq "getWordAlternatives") || ($op eq "getWordAlternativesConfidences")
				|| ($op eq "getWordAlternativesStartTimes") || ($op eq "getWordAlternativesEndTimes")) {
			$wordAlternativesNeeded = 1;
		} elsif ($op eq "isTranscriptionCompleted") {
			$isTranscriptionCompletedRequested = 1;
		} elsif (($op eq "getUtteranceNumber") || ($op eq "isFinalizedUtterance") ||
				($op eq "getConfidence") || ($op eq "getUtteranceAlternatives")) {
			if ($sttResultMode eq "complete") {
				SPL::CodeGen::warnln("In sttResultMode complete, Output Function $op does not deliver results", $model->getContext()->getSourceLocation());
			}
		# Type check for keyword result
		} elsif ($op eq "getKeywordsSpottingResults") {
			if (($attributeType eq "map<rstring,list<map<rstring,float64>>>")
					|| ($attributeType eq "map<rstring,list<tuple<float64 startTime,float64 endTime,float64 confidence>>>")) {
				$keywordsSpottingResultType = "$attributeType";
			} else {
				SPL::CodeGen::exitln("Attribute %s has wrong type! It must be of type map<rstring,list<tuple<float64 startTime,float64 endTime,float64 confidence>>> or map<rstring,list<map<rstring,float64>>>", "$name", $oport->getSourceLocation());
			}
		}
	}
	
	# second loop to determine the default assignemnts
	print "// attributes with assignments:";
	foreach my $attribute (@{$oport->getAttributes()}) {
		my $name = $attribute->getName(); 
		my $paramValues = $attribute->getAssignmentOutputFunctionParameterValues();
		my $attributeType = $attribute->getSPLType();
		if ($attribute->hasAssignment() || $attribute->hasAssignmentWithOutputFunction()) {
			print " $name";
		} else {
			if (($name eq "utteranceNumber") && ($getUtteranceNumberName eq "")) {
				if ($attributeType eq "int32") {
					if ($sttResultMode ne "complete") {
						$getUtteranceNumberName = "$name";
					} else {
						SPL::CodeGen::warnln("In sttResultMode complete, default attribute $name does not deliver results", $model->getContext()->getSourceLocation());
					}
				}
			} elsif (($name eq "utteranceText") && ($getUtteranceTextName eq "")) {
				if ($attributeType eq "rstring") {
					$getUtteranceTextName = "$name";
				}
			} elsif (($name eq "finalizedUtterance") && ($isFinalizedUtteranceName eq "")) {
				if ($attributeType eq "boolean") {
					if ($sttResultMode ne "complete") {
						$isFinalizedUtteranceName = "$name";
					} else {
						SPL::CodeGen::warnln("In sttResultMode complete, default attribute $name does not deliver results", $model->getContext()->getSourceLocation());
					}
				}
			} elsif (($name eq "confidence") && ($getConfidenceName eq "")) {
				if ($attributeType eq "float64") {
					if ($sttResultMode ne "complete") {
						$getConfidenceName = "$name";
					} else {
						SPL::CodeGen::warnln("In sttResultMode complete, default attribute $name does not deliver results", $model->getContext()->getSourceLocation());
					}
				}
			} elsif (($name eq "sttErrorMessage") && ($getSTTErrorMessageName eq "")) {
				if ($attributeType eq "rstring") {
					$getSTTErrorMessageName = "$name";
				}
			} elsif (($name eq "transcriptionCompleted") && ($isTranscriptionCompletedName eq "")) {
				if ($attributeType eq "boolean") {
					$isTranscriptionCompletedName = "$name";
					$isTranscriptionCompletedRequested = 1;
				}
			} elsif (($name eq "utteranceAlternatives") && ($getUtteranceAlternativesName eq "")) {
				if ($attributeType eq "list<rstring>") {
					if ($sttResultMode ne "complete") {
						$getUtteranceAlternativesName = "$name";
						$utteranceAlternativesNeeded = 1;
					} else {
						SPL::CodeGen::warnln("In sttResultMode complete, default attribute $name does not deliver results", $model->getContext()->getSourceLocation());
					}
				}
			} elsif (($name eq "wordAlternatives") && ($getWordAlternativesName eq "")) {
				if ($attributeType eq "list<list<rstring>>") {
					$getWordAlternativesName = "$name";
					$wordAlternativesNeeded = 1;
				}
			} elsif (($name eq "wordAlternativesConfidences") && ($getWordAlternativesConfidencesName eq "")) {
				if ($attributeType eq "list<list<float64>>") {
					$getWordAlternativesConfidencesName = "$name";
					$wordAlternativesNeeded = 1;
				}
			} elsif (($name eq "wordAlternativesStartTimes") && ($getWordAlternativesStartTimesName eq "")) {
				if ($attributeType eq "list<list<float64>>") {
					$getWordAlternativesStartTimesName = "$name";
					$wordAlternativesNeeded = 1;
				}
			} elsif (($name eq "wordAlternativesEndTimes") && ($getWordAlternativesEndTimesName eq "")) {
				if ($attributeType eq "list<list<float64>>") {
					$getWordAlternativesEndTimesName = "$name";
					$wordAlternativesNeeded = 1;
				}
			} elsif (($name eq "utteranceWords") && ($getUtteranceWordsName eq "")) {
				if ($attributeType eq "list<rstring>") {
					$getUtteranceWordsName = "$name";
				}
			} elsif (($name eq "utteranceWordsConfidences") && ($getUtteranceWordsConfidencesName eq "")) {
				if ($attributeType eq "list<float64>") {
					$getUtteranceWordsConfidencesName = "$name";
					$wordConfidenceNeeded = 1;
				}
			} elsif (($name eq "utteranceWordsStartTimes") && ($getUtteranceWordsStartTimesName eq "")) {
				if ($attributeType eq "list<float64>") {
					$getUtteranceWordsStartTimesName = "$name";
					$wordTimestampNeeded = 1;
				}
			} elsif (($name eq "utteranceWordsEndTimes") && ($getUtteranceWordsEndTimesName eq "")) {
				if ($attributeType eq "list<float64>") {
					$getUtteranceWordsEndTimesName = "$name";
					$wordTimestampNeeded = 1;
				}
			} elsif (($name eq "utteranceStartTime") && ($getUtteranceStartTimeName eq "")) {
				if ($attributeType eq "float64") {
					$getUtteranceStartTimeName = "$name";
					$wordTimestampNeeded = 1;
				}
			} elsif (($name eq "utteranceEndTime") && ($getUtteranceEndTimeName eq "")) {
				if ($attributeType eq "float64") {
					$getUtteranceEndTimeName = "$name";
					$wordTimestampNeeded = 1;
				}
			} elsif (($name eq "utteranceWordsSpeakers") && ($getUtteranceWordsSpeakersName eq "")) {
				if ($attributeType eq "list<int32>") {
					$getUtteranceWordsSpeakersName = "$name";
					$wordTimestampNeeded = 1;
					$identifySpeakers = 1;
				}
			} elsif (($name eq "utteranceWordsSpeakersConfidences") && ($getUtteranceWordsSpeakersConfidencesName eq "")) {
				if ($attributeType eq "list<float64>") {
					$getUtteranceWordsSpeakersConfidencesName = "$name";
					$wordTimestampNeeded = 1;
					$identifySpeakers = 1;
				}
			} elsif (($name eq "utteranceWordsSpeakerUpdates") && ($getUtteranceWordsSpeakerUpdatesName eq "")) {
				if ($attributeType eq "list<tuple<float64 startTime,int32 speaker,float64 confidence>>") {
					$getUtteranceWordsSpeakerUpdatesName = "$name";
					$wordTimestampNeeded = 1;
					$identifySpeakers = 1;
					my $speakerUpdatesNeeded = 1;
				}
			} elsif (($name eq "keywordsSpottingResults") && ($getKeywordsSpottingResultsName eq "")) {
				if (($attributeType eq "map<rstring,list<map<rstring,float64>>>")
						|| $attributeType eq "map<rstring,list<tuple<float64 startTime,float64 endTime,float64 confidence>>>") {
					$getKeywordsSpottingResultsName = "$name";
					$keywordsSpottingResultType = "$attributeType";
				}
			}
			
		}
	}
	print "\n";
	print "// wordConfidenceNeeded=$wordConfidenceNeeded wordTimestampNeeded=$wordTimestampNeeded\n";
	print "// identifySpeakers=$identifySpeakers speakerUpdatesNeeded=$speakerUpdatesNeeded\n";
	print "// isTranscriptionCompletedRequested=$isTranscriptionCompletedRequested\n";
	print "// utteranceAlternativesNeeded=$utteranceAlternativesNeeded wordAlternativesNeeded=$wordAlternativesNeeded\n";
	print "// keywordsSpottingResultType=$keywordsSpottingResultType\n";

	# Following are the operator parameters.
	
	my $nonFinalUtterancesNeeded = $model->getParameterByName("nonFinalUtterancesNeeded");
	if ($nonFinalUtterancesNeeded) {
		if ($sttResultMode eq "complete") {
			SPL::CodeGen::warnln("Parameter nonFinalUtterancesNeeded is ignored if sttResultMode equals complete", $model->getContext()->getSourceLocation());
		}
	}
	$nonFinalUtterancesNeeded = $nonFinalUtterancesNeeded ? $nonFinalUtterancesNeeded->getValueAt(0)->getCppExpression() : 0;
	
	my $uri = $model->getParameterByName("uri");
	$uri = $uri->getValueAt(0)->getCppExpression();

	my $baseLanguageModel = $model->getParameterByName("baseLanguageModel");
	$baseLanguageModel = $baseLanguageModel->getValueAt(0)->getCppExpression();

	# Record the optional parameter values if present. Otherwise, set the default value.
	my $contentType = $model->getParameterByName("contentType");
	$contentType = $contentType ? $contentType->getValueAt(0)->getCppExpression() : "\"audio/wav\"";

	my $sttRequestLogging = $model->getParameterByName("sttRequestLogging");
	$sttRequestLogging = $sttRequestLogging ? $sttRequestLogging->getValueAt(0)->getCppExpression() : 0;
	
	my $baseModelVersion = $model->getParameterByName("baseModelVersion");
	$baseModelVersion = $baseModelVersion ? $baseModelVersion->getValueAt(0)->getCppExpression() : "\"\"";
	
	my $customizationId = $model->getParameterByName("customizationId");
	$customizationId = $customizationId ? $customizationId->getValueAt(0)->getCppExpression() : "\"\"";
	
	my $customizationWeight = $model->getParameterByName("customizationWeight");
	$customizationWeight = $customizationWeight ? $customizationWeight->getValueAt(0)->getCppExpression() : 9.9;
	
	my $acousticCustomizationId = $model->getParameterByName("acousticCustomizationId");
	$acousticCustomizationId = $acousticCustomizationId ? $acousticCustomizationId->getValueAt(0)->getCppExpression() : "\"\"";

	my $filterProfanity = $model->getParameterByName("filterProfanity");
	$filterProfanity = $filterProfanity ? $filterProfanity->getValueAt(0)->getCppExpression() : 0;

	my $maxUtteranceAlternatives = $model->getParameterByName("maxUtteranceAlternatives");
	if (($sttResultMode eq "complete") && $maxUtteranceAlternatives) {
		SPL::CodeGen::warnln("In sttResultMode complete, parameter maxUtteranceAlternatives is ignored", $model->getContext()->getSourceLocation());
	}
	# Default: 3
	$maxUtteranceAlternatives = $maxUtteranceAlternatives ? $maxUtteranceAlternatives->getValueAt(0)->getCppExpression() : 3;
	# to disable the feature set to 0
	if ($utteranceAlternativesNeeded == 0) {
		$maxUtteranceAlternatives = 1;
	}

	my $wordAlternativesThreshold = $model->getParameterByName("wordAlternativesThreshold");
	# Default: 0.6
	$wordAlternativesThreshold = $wordAlternativesThreshold ? $wordAlternativesThreshold->getValueAt(0)->getCppExpression() : 0.6;
	# to distable the wordAlternatives feature (a.k.a Confusion Networks) set to 0.0.
	if ($wordAlternativesNeeded == 0) {
		$wordAlternativesThreshold = 0.0;
	}

	my $smartFormattingNeeded = $model->getParameterByName("smartFormattingNeeded");
	$smartFormattingNeeded = $smartFormattingNeeded ? $smartFormattingNeeded->getValueAt(0)->getCppExpression() : 0;

	my $keywordsSpottingThreshold = $model->getParameterByName("keywordsSpottingThreshold");
	# Default: 0.0 to distable the keywords spotting feature.
	$keywordsSpottingThreshold = $keywordsSpottingThreshold ? $keywordsSpottingThreshold->getValueAt(0)->getCppExpression() : 0.3;
	
	my $keywordsToBeSpotted = $model->getParameterByName("keywordsToBeSpotted");
	$keywordsToBeSpotted = $keywordsToBeSpotted ? $keywordsToBeSpotted->getValueAt(0)->getCppExpression() : "SPL::list<SPL::rstring>{}";

	my $websocketLoggingNeeded = $model->getParameterByName("websocketLoggingNeeded");
	$websocketLoggingNeeded = $websocketLoggingNeeded ? $websocketLoggingNeeded->getValueAt(0)->getCppExpression() : 0;

	my $cpuYieldTimeInAudioSenderThread = $model->getParameterByName("cpuYieldTimeInAudioSenderThread");
	# Default: 0.001 second i.e. 1 millisecond of CPU yield time inside a tight loop.
	$cpuYieldTimeInAudioSenderThread = $cpuYieldTimeInAudioSenderThread ? $cpuYieldTimeInAudioSenderThread->getValueAt(0)->getCppExpression() : 0.001;

	my $maxConnectionRetryDelay = $model->getParameterByName("maxConnectionRetryDelay");
	# Default: 60.0 seconds.
	$maxConnectionRetryDelay = $maxConnectionRetryDelay ? $maxConnectionRetryDelay->getValueAt(0)->getCppExpression() : 60.0;

	my $sttLiveMetricsUpdateNeeded = $model->getParameterByName("sttLiveMetricsUpdateNeeded");
	$sttLiveMetricsUpdateNeeded = $sttLiveMetricsUpdateNeeded ? $sttLiveMetricsUpdateNeeded->getValueAt(0)->getCppExpression() : 1;
%>

#include <type_traits>

<%SPL::CodeGen::implementationPrologue($model);%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
:
		MY_BASE_OPERATOR{},
		com::ibm::streams::sttgateway::WatsonSTTImpl<MY_OPERATOR, OPort0Type>(
				*this,
				Conf{
						getContext().getName(),
						getContext().getChannel(),
						"Operator " + getContext().getName() + "-->Channel " + boost::to_string(getContext().getChannel()),

						<%=$websocketLoggingNeeded%>,
						<%=$cpuYieldTimeInAudioSenderThread%>,
						<%=$maxConnectionRetryDelay%>,
						<%=$sttLiveMetricsUpdateNeeded%>,
						<%=$uri%>,
						<%=$baseLanguageModel%>,
						<%=$contentType%>,
						<%=$sttResultMode%>,
						<%=$nonFinalUtterancesNeeded%>,
						<%=$sttRequestLogging%>,
						<%=$baseModelVersion%>,
						<%=$customizationId%>,
						<%=$customizationWeight%>,
						<%=$acousticCustomizationId%>,
						<%=$filterProfanity%>,
						<%=$maxUtteranceAlternatives%>,
						<%=$wordAlternativesThreshold%>,
						<%=$wordConfidenceNeeded%>,
						<%=$wordTimestampNeeded%>,
						<%=$identifySpeakers%>,
						<%=$speakerUpdatesNeeded%>,
						<%=$smartFormattingNeeded%>,
						<%=$keywordsSpottingThreshold%>,
						<%=$keywordsToBeSpotted%>,
						<%=$isTranscriptionCompletedRequested%>
					}
				)
{}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
	Impl::allPortsReady();
}

void MY_OPERATOR::process(uint32_t idx) {
	Impl::process(idx);
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
	Impl::prepareToShutdown();
}

// This operator has two input ports.
// Port 0: Audio data (a file name or a blob) arrives on this port. (non mutating)
// Port 1: It is a control port where the IAM access token is
//         sent into this operator for connecting to the
//         STT service in a secure manner. (non mutating)

//Non mutating ports 0 and 1
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	
	switch (port) {
	case 1: {
		// Let is first process if the IAM access token is sent via port 1 i.e. second input port.
		IPort1Type const & inputTuple = static_cast<IPort1Type const &>(tuple);
		Impl::process_1<IPort1Type, &IPort1Type::get_access_token>(inputTuple);
		break;
	}
	case 0: {
		IPort0Type const & <%=$inputTupleName%> = static_cast<IPort0Type const &>(tuple);
		Impl::process_0<IPort0Type, <%=$speechAttributeType%>, &IPort0Type::get_speech>(<%=$inputTupleName%>);
		break;
	}
	default:
		throw std::invalid_argument("Invalid port number!");
	}
}

// With the WebSocket interface, audio data is always streamed to the 
// STT service over the connection. You can pass the blob data through the 
// Websocket all at once, or you can pass data for the live-use case 
// as it becomes available.
//
// Since the Websocket interface keeps its request/response communication to 
// the STT service completely asynchronus on the full duplex TCP connection,
// our tuple processing here is going to be different from the way it is 
// usually done inside the Streams operators. 
// There will be multiple threads: One for receiving tuples on this 
// operator's input port and for sending the audio data to the 
// STT service and another for receiving transcription responses from the 
// STT service as well as to send the output tuples on this operator's 
// output port. It is somewhat different from the usual stuff and 
// very involved in terms of the logic. So, read the code completely to 
// understand what is going on inside all these threads.

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
	// Forward the punctuation markers on our first input port to the Impl class.
	// Puncts from port 1 are ignored
	// Final markers are not handled from streams runtime -> see Operator model finalPunctuationPortScope
	if (port == 0) {
		Impl::processPunct_0(punct);
	}
}

//Create a output tuple and auto assign values from an input tuple
MY_OPERATOR::OPort0Type* MY_OPERATOR::createOutTupleAndAutoAssign(MY_OPERATOR::IPort0Type const& <%=$inputTupleName%>) {
	OPort0Type *oTuple = new OPort0Type;
	
	if (oTuple == NULL) {
		// Object instantiation (memory allocation) error.
		throw std::bad_alloc();
			//Don't try to allocate further strings
			//"WatsonSTT_cpp.cgt: Unable to create a new oTuple object in the process method.");
	}
	
<%	my $oport = $model->getOutputPortAt(0); 
	foreach my $attribute (@{$oport->getAttributes()}) { 
		my $name = $attribute->getName(); 
		# print "// $name\n";
		my $operation = $attribute->getAssignmentOutputFunctionName();
		# print "// $operation\n";
		if ($operation eq "AsIs") { 
			my $init = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();
%>
			oTuple->set_<%=$name%>(<%=$init%>);
<%
		}
	}
%>
	return oTuple;
}

// append to the error message attribute of the output tuple
void MY_OPERATOR::appendErrorAttribute(OPort0Type * tuple, std::string const & errorMessage) {
<% 
	my $oport = $model->getOutputPortAt(0); 
	foreach my $attribute (@{$oport->getAttributes()}) { 
		my $name = $attribute->getName(); 
		my $paramValues = $attribute->getAssignmentOutputFunctionParameterValues();
		my $operation = $attribute->getAssignmentOutputFunctionName();

		if (($operation eq "getSTTErrorMessage") || ($name eq $getSTTErrorMessageName)) {
%>
			SPL::rstring & ea = tuple->get_<%=$name%>();
			ea.append(SPL::rstring(errorMessage));
<%		}
	}
%>
}

// clear to the error message attribute of the output tuple
void MY_OPERATOR::clearErrorAttribute(OPort0Type * tuple) {
<% 
	my $oport = $model->getOutputPortAt(0); 
	foreach my $attribute (@{$oport->getAttributes()}) { 
		my $name = $attribute->getName(); 
		my $paramValues = $attribute->getAssignmentOutputFunctionParameterValues();
		my $operation = $attribute->getAssignmentOutputFunctionName();

		if (($operation eq "getSTTErrorMessage") || ($name eq $getSTTErrorMessageName)) {
%>
			tuple->get_<%=$name%>().clear();
<%		}
	}
%>
}

// Assign result attributes except speaker results and transcription complete to output tuple
void MY_OPERATOR::setResultAttributes(
		OPort0Type * tuple,
		int32_t utteranceNumber_,
		bool final_,
		// utterance
		SPL::float64 confidence_,
		SPL::float64 utteranceStartTime_,
		SPL::float64 utteranceEndTime_,
		const SPL::rstring & utteranceText_,
		// alternatives
		const SPL::list<SPL::rstring> & utteranceAlternatives_,
		// utterance words
		const SPL::list<SPL::rstring> & utteranceWords_,
		const SPL::list<SPL::float64> & utteranceWordsConfidences_,
		const SPL::list<SPL::float64> & utteranceWordsStartTimes_,
		const SPL::list<SPL::float64> & utteranceWordsEndTimes_,
		// confusion network
		const SPL::list<SPL::list<SPL::rstring>> & wordAlternatives_,
		const SPL::list<SPL::list<SPL::float64>> & wordAlternativesConfidences_,
		const SPL::list<SPL::float64> & wordAlternativesStartTimes_,
		const SPL::list<SPL::float64> & wordAlternativesEndTimes_,
		// keyword spotting
		const com::ibm::streams::sttgateway::KeywordProcessor & keywordproc_
) {
<% 
	my $oport = $model->getOutputPortAt(0); 
	foreach my $attribute (@{$oport->getAttributes()}) {
		my $name = $attribute->getName(); 
		my $paramValues = $attribute->getAssignmentOutputFunctionParameterValues();
		my $operation = $attribute->getAssignmentOutputFunctionName(); 

		if (($operation eq "getUtteranceNumber") || ($name eq $getUtteranceNumberName)) {
%>
			// Utterance number starts from 0. Hence, add 1 to it.
			tuple->set_<%=$name%>(utteranceNumber_ + 1);
<%		} elsif (($operation eq "getUtteranceText") || ($name eq $getUtteranceTextName)) { %>
			tuple->set_<%=$name%>(utteranceText_);
<%		} elsif (($operation eq "isFinalizedUtterance") || ($name eq $isFinalizedUtteranceName)) { %>
			tuple->set_<%=$name%>(final_);
<%		} elsif (($operation eq "getConfidence") || ($name eq $getConfidenceName)) { %>
			tuple->set_<%=$name%>(confidence_);
<%		} elsif (($operation eq "isTranscriptionCompleted") || ($name eq $isTranscriptionCompletedName)) { %>
			tuple->set_<%=$name%>(false);
<%		} elsif (($operation eq "getUtteranceAlternatives") || ($name eq $getUtteranceAlternativesName)) { %>
			tuple->set_<%=$name%>(utteranceAlternatives_);
<%		} elsif (($operation eq "getWordAlternatives") || ($name eq $getWordAlternativesName)) { %>
			tuple->set_<%=$name%>(wordAlternatives_);
<%		} elsif (($operation eq "getWordAlternativesConfidences") || ($name eq $getWordAlternativesConfidencesName)) { %>
			tuple->set_<%=$name%>(wordAlternativesConfidences_);
<%		} elsif (($operation eq "getWordAlternativesStartTimes") || ($name eq $getWordAlternativesStartTimesName)) { %>
			tuple->set_<%=$name%>(wordAlternativesStartTimes_);
<%		} elsif (($operation eq "getWordAlternativesEndTimes") || ($name eq $getWordAlternativesEndTimesName)) { %>
			tuple->set_<%=$name%>(wordAlternativesEndTimes_);
<%		} elsif (($operation eq "getUtteranceWords") || ($name eq $getUtteranceWordsName)) { %>
			tuple->set_<%=$name%>(utteranceWords_);
<%		} elsif (($operation eq "getUtteranceWordsConfidences") || ($name eq $getUtteranceWordsConfidencesName)) { %>
			tuple->set_<%=$name%>(utteranceWordsConfidences_);
<%		} elsif (($operation eq "getUtteranceWordsStartTimes") || ($name eq $getUtteranceWordsStartTimesName)) { %>
			tuple->set_<%=$name%>(utteranceWordsStartTimes_);
<%		} elsif (($operation eq "getUtteranceWordsEndTimes") || ($name eq $getUtteranceWordsEndTimesName)) { %>
			tuple->set_<%=$name%>(utteranceWordsEndTimes_);
<%		} elsif (($operation eq "getUtteranceStartTime") || ($name eq $getUtteranceStartTimeName)) { %>
			tuple->set_<%=$name%>(utteranceStartTime_);
<%		} elsif (($operation eq "getUtteranceEndTime") || ($name eq $getUtteranceEndTimeName)) { %>
			tuple->set_<%=$name%>(utteranceEndTime_);
<%		} elsif (($operation eq "getKeywordsSpottingResults") || ($name eq $getKeywordsSpottingResultsName)) { %>
			//tuple->set_<%=$name%>(keywordsSpottingResults_);
			auto & theKeywMap = tuple->get_<%=$name%>();
			keywordproc_.getKeywordsSpottingResults(theKeywMap);
<%
		}
	}
%>
}

// Assign speaker result to output tuple
void MY_OPERATOR::setSpeakerResultAttributes(OPort0Type * tuple, const com::ibm::streams::sttgateway::SpeakerProcessor & spkproc) {
<% 
	my $oport = $model->getOutputPortAt(0);
	foreach my $attribute (@{$oport->getAttributes()}) {
		my $name = $attribute->getName();
		my $paramValues = $attribute->getAssignmentOutputFunctionParameterValues();
		my $operation = $attribute->getAssignmentOutputFunctionName();

		if (($operation eq "getUtteranceWordsSpeakers") || ($name eq $getUtteranceWordsSpeakersName)) {
%>
			tuple->set_<%=$name%>(spkproc.getUtteranceWordsSpeakers());
<%		} elsif (($operation eq "getUtteranceWordsSpeakersConfidences") || ($name eq $getUtteranceWordsSpeakersConfidencesName)) { %>
			tuple->set_<%=$name%>(spkproc.getUtteranceWordsSpeakersConfidences());
<%		} elsif (($operation eq "getUtteranceWordsSpeakerUpdates") || ($name eq $getUtteranceWordsSpeakerUpdatesName)) { %>
			//auto & theTupleList = tuple->get_<%=$name%>();
			//theTupleList.clear();
			//spkproc.getUtteranceWordsSpeakerUpdates(theTupleList);
			tuple->set_<%=$name%>(
					spkproc.getUtteranceWordsSpeakerUpdates
						<std::remove_reference<
							decltype(tuple->get_<%=$name%>())
						>::type::value_type
					>()
			);
<%
		}
	}
%>
}

// Assign transcription complete attribute to output tuple
void MY_OPERATOR::setTranscriptionCompleteAttribute(OPort0Type * tuple) {
<% 
	my $oport = $model->getOutputPortAt(0);
	foreach my $attribute (@{$oport->getAttributes()}) {
	my $name = $attribute->getName();
		my $paramValues = $attribute->getAssignmentOutputFunctionParameterValues();
		my $operation = $attribute->getAssignmentOutputFunctionName();

		if (($operation eq "isTranscriptionCompleted") || ($name eq $isTranscriptionCompletedName)) {
%>
			tuple->set_<%=$name%>(true);
<%		}
	}
%>
}

<%SPL::CodeGen::implementationEpilogue($model);%>
